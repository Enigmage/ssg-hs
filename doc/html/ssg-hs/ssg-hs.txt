-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Static site generator
--   
--   This package provides a static site generator from a custom markup
--   format to HTML. It defines a parser for this custom markup format as
--   well as an html pretty printer EDSL.
@package ssg-hs
@version 0.1.0.0

module Lib.Env
data Env
Env :: String -> FilePath -> Env
[eBlogName] :: Env -> String
[eStylesheetPath] :: Env -> FilePath
defaultEnv :: Env
instance GHC.Show.Show Lib.Env.Env

module Lib.Html.Internal
newtype Html
Html :: String -> Html
newtype Head
Head :: String -> Head
newtype Structure
Structure :: String -> Structure
newtype Content
Content :: String -> Content
type Title = String
getStructureContent :: Structure -> String
getContentString :: Content -> String
render :: Html -> String
html_ :: Head -> Structure -> Html
title_ :: String -> Head
stylesheet_ :: FilePath -> Head
meta_ :: String -> String -> Head
h1_ :: Content -> Structure
h2_ :: Content -> Structure
h3_ :: Content -> Structure
p_ :: Content -> Structure
ul_ :: [Structure] -> Structure
getHtmlList :: [Structure] -> String
txt_ :: String -> Content
img_ :: FilePath -> String -> Content
link_ :: FilePath -> Content -> Content
b_ :: Content -> Content
i_ :: Content -> Content
el :: String -> String -> String
elWithAttr :: String -> String -> String -> String
escape :: String -> String
instance GHC.Show.Show Lib.Html.Internal.Content
instance GHC.Base.Semigroup Lib.Html.Internal.Structure
instance GHC.Base.Monoid Lib.Html.Internal.Structure
instance GHC.Base.Semigroup Lib.Html.Internal.Head
instance GHC.Base.Monoid Lib.Html.Internal.Head

module Lib.Html
data Html
data Structure
data Head
type Title = String
data Content
title_ :: String -> Head
stylesheet_ :: FilePath -> Head
meta_ :: String -> String -> Head
txt_ :: String -> Content
link_ :: FilePath -> Content -> Content
img_ :: FilePath -> String -> Content
b_ :: Content -> Content
i_ :: Content -> Content
html_ :: Head -> Structure -> Html
p_ :: Content -> Structure
h1_ :: Content -> Structure
h2_ :: Content -> Structure
h3_ :: Content -> Structure
ul_ :: [Structure] -> Structure
render :: Html -> String

module Lib.Markup
type Document = [Structure]
data Structure
Heading :: HeadingLevel -> String -> Structure
Paragraph :: String -> Structure
UnorderedList :: [String] -> Structure
data HeadingLevel
H1 :: HeadingLevel
H2 :: HeadingLevel
H3 :: HeadingLevel
parse :: String -> Document
instance GHC.Show.Show Lib.Markup.HeadingLevel
instance GHC.Classes.Eq Lib.Markup.HeadingLevel
instance GHC.Show.Show Lib.Markup.Structure
instance GHC.Classes.Eq Lib.Markup.Structure

module Lib.Convert
markupToHtml :: Env -> Title -> Document -> Html
convertMarkup :: Structure -> Structure

module Lib.Util
whenIO :: IO Bool -> IO () -> IO ()
confirm :: String -> IO Bool

module Lib
convertSingle :: String -> Handle -> Handle -> IO ()
convertDirectory :: Env -> FilePath -> FilePath -> IO ()
